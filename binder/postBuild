#!/usr/bin/env python3
""" perform a development install of jupyterlab-proxy-gui and jupyterlab_proxy_gui

    On Binder, this will run _after_ the environment has been fully created from
    the environment.yml in this directory.

    This script should also run locally on Linux/MacOS/Windows:

        python3 binder/postBuild
"""
import subprocess
import sys
import os

os.environ["NODE_OPTIONS"] = "--max_old_space_size=4096"

def _(*args, **kwargs):
    """ Run a command, echoing the args

        fails hard if something goes wrong
    """
    print("\n\tRUN ", " ".join(args), "\n")
    return_code = subprocess.call(args, **kwargs)
    if return_code != 0:
        print("\nERROR", return_code, " ".join(args))
        #sys.exit(return_code)


# verify the environment is self-consistent before even starting
#_(sys.executable, "-m", "pip", "check")

# update all labextension
#_("jupyter", "labextension", "update", "--all")

# install the labextension
#_(sys.executable, "-m", "pip", "install", "-e", ".")

# verify the environment the extension didn't break anything
#_(sys.executable, "-m", "pip", "check")

# enable the serverextension (normally would be handled by package_data)
#_("jupyter", "serverextension", "enable", "--sys-prefix", "--py", "jupyterlab_proxy_gui")

# list the extensions
#_("jupyter", "serverextension", "list")

# install dependencies
#_("jlpm")
#_("jlpm", "build")

# install the labextension
#_("jupyter", "labextension", "link", ".")

# verify the list of extensions
#_("jupyter", "labextension", "list")

#print("JupyterLab with jupyterlab-proxy-gui is ready to run with:\n")
#print("\tjupyter lab\n")


_("echo", "$NODE_OPTIONS")

_("pip", "install", "jupyterlab_proxy_gui")

_("NODE_OPTIONS='--max_old_space_size=4096'", "jupyter", "lab", "build", "--dev-build=False", "--minimize=False")


#print("JupyterLab with jupyterlab-proxy-gui is ready to run with:\n")
#print("\tjupyter lab\n")